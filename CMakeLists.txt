cmake_minimum_required (VERSION 3.8)

project ("sorting")

add_executable(sorting "main.cpp"  "src/sorting/core/bubble_sort.cpp" "include/sorting/bubble_sort.hpp"     "include/sorting/operation.hpp"   "include/sorting/sorting.hpp" "src/utils/array_utils.cpp" "include/sorting/assert.hpp"  "include/sorting/array_utils.hpp" "include/sorting/insertion_sort.hpp" "src/sorting/core/insertion_sort.cpp" "src/sorting/core/template.cpp"  "include/sorting/selection_sort.hpp" "src/sorting/core/selection_sort.cpp" "src/selection/minimum.cpp" "include/sorting/minimum.hpp" "src/utils/assert.cpp" "include/sorting/maximum.hpp" "src/selection/maximum.cpp" "include/sorting/partition.hpp" "include/sorting/quick_partition.hpp" "src/partition/quick_partition.cpp" "include/sorting/quick_sort.hpp" "src/sorting/core/quick_sort.cpp" "include/sorting/shell_sort.hpp" "src/sorting/core/shell_sort.cpp" "include/sorting/merge_sort.hpp" "src/sorting/core/merge_sort.cpp"  "include/sorting/dual_pivot_quick_partition.hpp" "src/partition/dual_pivot_quick_partition.cpp" "include/sorting/dual_pivot_quick_sort.hpp" "src/sorting/core/dual_pivot_quick_sort.cpp" "include/sorting/timer.hpp" "include/sorting/counting_sort.hpp" "src/sorting/core/counting_sort.cpp"  "include/sorting/indexer.hpp" "include/sorting/simple_indexer.hpp" "src/indexing/simple_indexer.cpp" "include/sorting/radix_indexer.hpp" "src/indexing/radix_indexer.cpp" "include/sorting/radix_sort.hpp" "src/sorting/core/radix_sort.cpp" "include/sorting/bucket_sort.hpp" "include/sorting/bucket_indexer.hpp" "src/indexing/bucket_indexer.cpp" "src/sorting/core/bucket_sort.cpp" "include/sorting/gapper.hpp" "include/sorting/comb_gapper.hpp" "include/sorting/comb_sort.hpp" "src/sorting/core/comb_sort.cpp" "include/sorting/swapper.hpp" "include/structures/heap.hpp" "src/structures/binary_max_heap.cpp" "include/structures/binary_max_heap.hpp" "include/sorting/heap_sort.hpp" "src/sorting/core/heap_sort.cpp" "include/sorting/intro_sort.hpp" "include/sorting/median_of_three.hpp" "src/selection/median_of_three.cpp"  "include/sorting/numeric_utils.hpp" "src/sorting/hybrid/intro_sort.cpp" "include/sorting/pivot_selector.hpp" "include/sorting/simple_pivot_selector.hpp" "src/selection/simple_pivot_selector.cpp" "include/sorting/multi_pivot_selector.hpp" "include/sorting/simple_dual_pivot_selector.hpp" "src/selection/simple_dual_pivot_selector.cpp" "include/sorting/median_of_three_pivot_selector.hpp" "src/selection/median_of_three_pivot_selector.cpp" "include/sorting/quick_merge_sort.hpp" "src/sorting/hybrid/quick_merge_sort.cpp" "include/sorting/debugger.hpp" "src/utils/debugger.cpp" "include/sorting/colors.hpp"      "include/sorting/progress.hpp"   "include/sorting/stream_utils.hpp" "src/utils/stream_utils.cpp"    "include/sorting/assert_arr.hpp" "src/utils/assert_arr.cpp"     "include/sorting/constants.hpp"    "include/test/executor.hpp" "include/test/results.hpp" "src/test/executor.cpp" "include/test/simple_executor.hpp" "src/test/simple_executor.cpp" "include/test/average_executor.hpp" "src/test/average_executor.cpp" "include/test/averager.hpp" "src/test/averager.cpp"      "include/config/configuration.hpp" "include/config/configuration_parser.hpp" "include/config/plot.hpp" "include/config/plot_parser.hpp" "include/test/sorting_mapper.hpp" "src/test/sorting_mapper.cpp" "include/sorting/fail.hpp" "include/config/invariants.hpp" "include/test/executor_mapper.hpp" "src/test/executor_mapper.cpp" "include/test/engine.hpp" "src/test/engine.cpp" "include/config/configuration_resolver.hpp" "src/config/configuration_resolver.cpp" "include/test/unit.hpp")
include_directories("./include/sorting/")
include_directories("./include/structures/")
include_directories("./include/test/")
include_directories("./include/config/")

find_package(fmt CONFIG REQUIRED)
target_link_libraries(sorting PRIVATE fmt::fmt-header-only)

find_package(scn CONFIG REQUIRED)
target_link_libraries(sorting PRIVATE scn::scn scn::scn-header-only)

find_package(nlohmann_json CONFIG REQUIRED)
target_link_libraries(sorting PRIVATE nlohmann_json nlohmann_json::nlohmann_json)
